
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import ast.*;
import sem.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\010\000\002\026\003\000" +
    "\002\026\003\000\002\006\010\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\006\000\002\012\006\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\017\007\000\002\017" +
    "\011\000\002\016\004\000\002\016\003\000\002\020\007" +
    "\000\002\021\004\000\002\021\005\000\002\022\005\000" +
    "\002\022\003\000\002\027\003\000\002\027\006\000\002" +
    "\030\005\000\002\030\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\031\005\000\002\031\003\000" +
    "\002\023\003\000\002\023\003\000\002\032\005\000\002" +
    "\032\003\000\002\024\003\000\002\024\003\000\002\033" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\006\000\002\035\003\000\002\035\002\000" +
    "\002\036\005\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\027\013\030\010\001\002\000\004\002" +
    "\150\001\002\000\010\002\ufffc\027\ufffc\030\ufffc\001\002" +
    "\000\010\002\ufffd\027\ufffd\030\ufffd\001\002\000\010\002" +
    "\001\027\013\030\010\001\002\000\004\036\ufff8\001\002" +
    "\000\004\036\014\001\002\000\010\002\uffff\027\uffff\030" +
    "\uffff\001\002\000\004\036\ufff9\001\002\000\010\010\017" +
    "\021\016\023\015\001\002\000\004\035\144\001\002\000" +
    "\006\027\013\030\021\001\002\000\032\002\ufffb\010\ufffb" +
    "\021\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\001\002\000\006\011\142" +
    "\022\ufff6\001\002\000\006\022\ufff5\036\ufff8\001\002\000" +
    "\004\036\137\001\002\000\004\022\025\001\002\000\006" +
    "\011\ufff3\022\ufff3\001\002\000\004\025\027\001\002\000" +
    "\010\002\ufff7\027\ufff7\030\ufff7\001\002\000\030\010\uffee" +
    "\021\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\034\uffee\035\uffee\036\uffee\001\002\000\030\010\uffec" +
    "\021\uffec\025\uffec\026\uffec\027\013\030\010\031\uffec\032" +
    "\uffec\034\uffec\035\uffec\036\uffec\001\002\000\024\010\037" +
    "\021\036\025\027\026\046\031\040\032\043\034\041\035" +
    "\045\036\044\001\002\000\030\010\uffef\021\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\034\uffef\035" +
    "\uffef\036\uffef\001\002\000\004\036\034\001\002\000\006" +
    "\010\017\023\015\001\002\000\024\010\uffed\021\uffed\025" +
    "\uffed\026\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed" +
    "\001\002\000\010\021\036\035\045\036\044\001\002\000" +
    "\026\010\uffe3\021\uffe3\025\uffe3\026\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\004\021" +
    "\131\001\002\000\012\010\126\021\036\035\045\036\044" +
    "\001\002\000\026\010\uffea\021\uffea\025\uffea\026\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\001\002" +
    "\000\004\021\120\001\002\000\044\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\107\022\uffdd\023" +
    "\106\024\uffdd\001\002\000\036\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\022\uffc8\024\uffc8\001\002\000\034" +
    "\002\ufff0\010\ufff0\021\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\001\002\000\004\010\105\001\002\000\026\010\uffe8\021" +
    "\uffe8\025\uffe8\026\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\001\002\000\036\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\022\uffce\024\uffce\001\002\000" +
    "\032\004\073\005\071\010\uffda\011\uffda\012\102\013\076" +
    "\014\075\015\072\016\074\017\101\022\uffda\024\uffda\001" +
    "\002\000\036\004\uffd2\005\uffd2\006\066\007\065\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\022\uffd2\024\uffd2\001\002\000\012\010\uffde\011\uffde" +
    "\022\uffde\024\uffde\001\002\000\026\010\uffeb\021\uffeb\025" +
    "\uffeb\026\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\001\002\000\026\010\uffe7\021\uffe7\025\uffe7\026" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\001\002\000\026\010\uffe9\021\uffe9\025\uffe9\026\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\001\002" +
    "\000\036\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\022\uffc9\024\uffc9\001\002\000\040\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\062\022\uffca\024\uffca\001" +
    "\002\000\010\021\036\035\045\036\044\001\002\000\012" +
    "\010\uffdf\011\uffdf\022\uffdf\024\uffdf\001\002\000\010\021" +
    "\036\035\045\036\044\001\002\000\010\021\uffcc\035\uffcc" +
    "\036\uffcc\001\002\000\010\021\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\036\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\022\uffca\024\uffca\001\002\000\036\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\024\uffcf\001\002" +
    "\000\010\021\uffd0\035\uffd0\036\uffd0\001\002\000\010\021" +
    "\uffd7\035\uffd7\036\uffd7\001\002\000\010\021\uffd1\035\uffd1" +
    "\036\uffd1\001\002\000\010\021\uffd5\035\uffd5\036\uffd5\001" +
    "\002\000\010\021\uffd9\035\uffd9\036\uffd9\001\002\000\010" +
    "\021\uffd6\035\uffd6\036\uffd6\001\002\000\010\021\036\035" +
    "\045\036\044\001\002\000\010\021\036\035\045\036\044" +
    "\001\002\000\010\021\uffd4\035\uffd4\036\uffd4\001\002\000" +
    "\010\021\uffd8\035\uffd8\036\uffd8\001\002\000\016\004\073" +
    "\005\071\010\uffdb\011\uffdb\022\uffdb\024\uffdb\001\002\000" +
    "\036\004\uffd3\005\uffd3\006\066\007\065\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022" +
    "\uffd3\024\uffd3\001\002\000\026\010\uffe4\021\uffe4\025\uffe4" +
    "\026\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\001\002\000\010\021\036\035\045\036\044\001\002" +
    "\000\012\021\036\022\uffc5\035\045\036\044\001\002\000" +
    "\006\011\114\022\uffc6\001\002\000\006\011\uffc3\022\uffc3" +
    "\001\002\000\004\022\113\001\002\000\036\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\024\uffc7\001" +
    "\002\000\010\021\036\035\045\036\044\001\002\000\006" +
    "\011\uffc4\022\uffc4\001\002\000\004\024\117\001\002\000" +
    "\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\024\uffdc\001\002\000\010\021\036\035\045" +
    "\036\044\001\002\000\004\022\122\001\002\000\022\010" +
    "\037\021\036\025\027\031\040\032\043\034\041\035\045" +
    "\036\044\001\002\000\026\010\uffe6\021\uffe6\025\uffe6\026" +
    "\uffe6\031\uffe6\032\uffe6\033\124\034\uffe6\035\uffe6\036\uffe6" +
    "\001\002\000\022\010\037\021\036\025\027\031\040\032" +
    "\043\034\041\035\045\036\044\001\002\000\026\010\uffe5" +
    "\021\uffe5\025\uffe5\026\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\001\002\000\026\010\uffe1\021\uffe1" +
    "\025\uffe1\026\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\001\002\000\004\010\130\001\002\000\026" +
    "\010\uffe0\021\uffe0\025\uffe0\026\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\010\021\036" +
    "\035\045\036\044\001\002\000\004\022\133\001\002\000" +
    "\022\010\037\021\036\025\027\031\040\032\043\034\041" +
    "\035\045\036\044\001\002\000\026\010\uffe2\021\uffe2\025" +
    "\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\001\002\000\004\022\136\001\002\000\036\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\024" +
    "\uffcb\001\002\000\010\011\ufff2\022\ufff2\023\140\001\002" +
    "\000\004\024\141\001\002\000\006\011\ufff1\022\ufff1\001" +
    "\002\000\006\027\013\030\010\001\002\000\006\011\ufff4" +
    "\022\ufff4\001\002\000\004\024\145\001\002\000\004\010" +
    "\146\001\002\000\032\002\ufffa\010\ufffa\021\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\001\002\000\010\002\ufffe\027\ufffe\030\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\016\002\003\003\006\004\011\005\005\006" +
    "\004\026\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\146\005\005\006\004\026" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\022\010\017\011\023\026\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\025\001\001\000\002\001\001\000\004\013\027\001" +
    "\001\000\010\005\031\014\030\026\032\001\001\000\034" +
    "\012\041\015\034\016\054\017\055\020\056\021\047\022" +
    "\046\027\060\030\053\031\051\032\052\033\050\034\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\134\027\060\030\053" +
    "\031\051\032\052\033\050\034\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\126\027\060\030\053" +
    "\031\051\032\052\033\050\034\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\076\025\077\001\001\000\004" +
    "\024\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\062\027\060\030\053\031\051\032" +
    "\052\033\050\034\057\001\001\000\002\001\001\000\010" +
    "\027\066\033\067\034\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\066" +
    "\032\103\033\050\034\057\001\001\000\014\027\066\031" +
    "\102\032\052\033\050\034\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\076\001\001\000\004\024" +
    "\063\001\001\000\002\001\001\000\020\022\115\027\060" +
    "\030\053\031\051\032\052\033\050\034\057\001\001\000" +
    "\024\022\110\027\060\030\053\031\051\032\052\033\050" +
    "\034\057\035\111\036\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\114\027\060\030\053\031\051\032\052\033\050\034" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\120\027\060\030\053\031\051\032" +
    "\052\033\050\034\057\001\001\000\002\001\001\000\034" +
    "\012\041\015\122\016\054\017\055\020\056\021\047\022" +
    "\046\027\060\030\053\031\051\032\052\033\050\034\057" +
    "\001\001\000\002\001\001\000\034\012\041\015\124\016" +
    "\054\017\055\020\056\021\047\022\046\027\060\030\053" +
    "\031\051\032\052\033\050\034\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\131\027\060\030\053\031\051\032\052\033" +
    "\050\034\057\001\001\000\002\001\001\000\034\012\041" +
    "\015\133\016\054\017\055\020\056\021\047\022\046\027" +
    "\060\030\053\031\051\032\052\033\050\034\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\142\026\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   boolean parsing_failed = false;
   String source_filename;

   public SrcLoc sLoc(java_cup.runtime.Symbol token) {return new SrcLoc(token.left, token.right, source_filename);}
   
   public parser(Lexer mylexer, String fname) 
   {
    super(mylexer);
   	source_filename = fname;
   }
   
   public void syntax_error(java_cup.runtime.Symbol cur_token) {
   	   parsing_failed = true;
   	   System.err.println("Syntax error " + sLoc(cur_token).toString() + " Got: " + cur_token.toString());
   }
   
   public boolean hasFailed() { return parsing_failed;}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list 
            {
              Object RESULT =null;
		int my_programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int my_programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode my_program = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				    //System.out.println(my_program.traverse(0));

					SEMscope topscope = new SEMscope(null);
					System.out.println("Building scopes ......");
					Func_Descriptor input_func = new Func_Descriptor("input");
                    if(input_func.overload(new ASTtype("void") , new ASTtype("int"), new SrcLoc(0,0))) {
                        topscope.insertFunc(input_func);
                    }

                    Func_Descriptor output_func = new Func_Descriptor("output");
                    if(output_func.overload(new ASTtype("int") , new ASTtype("void"), new SrcLoc(0,0))) {
                        topscope.insertFunc(output_func);
                    }

					my_program.buildscopes(topscope);
                    System.out.println("Done!");
					System.out.println("Performing semantics analysis ......");
					my_program.analyze();
                    System.out.println("Done!");
					//check if main is defined
					if(!topscope.main_found){
					    topscope.error_output("main function must be defined!");
					}

 				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration 
            {
              ASTnode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode d = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			     RESULT = d;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list declaration 
            {
              ASTnode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTlist(s, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              ASTnode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode vd = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              ASTnode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode fd = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID SEMI 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTtype t = (ASTtype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

				    RESULT = new ASTvardecl(t, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID LS NUM RS SEMI 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTtype t = (ASTtype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LEXSymbol n = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ASTarraydecl(t, name, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              ASTtype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol t = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				    RESULT = new ASTtype(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              ASTtype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol t = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTtype(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID LP params RP compound_stmt 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTtype t = (ASTtype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LEXSymbol i = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode f = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode b = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTfunc(t, i, f, b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              ASTnode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode pl = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              ASTnode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol v = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ASTleaf(v);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMMA param 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode p = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTparamlist(l, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              ASTnode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode p = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTtype t = (ASTtype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTformal(t, name, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID LS RS 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTtype t = (ASTtype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ASTformal(t, name, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= LC local_declarations statement_list RC 
            {
              ASTnode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode decls = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode stmts = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ASTblock(decls, stmts);
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode v = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                RESULT = new ASTlist(l, v);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= 
            {
              ASTnode RESULT =null;
		
                                RESULT = new ASTleaf();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTlist(l, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              ASTnode RESULT =null;
		
                RESULT = new ASTleaf();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              ASTnode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode c = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= iteration_stmt 
            {
              ASTnode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode i = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= return_stmt 
            {
              ASTnode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode r = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= selection_stmt 
            {
              ASTnode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // selection_stmt ::= IF LP expression RP statement 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTifthen(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // selection_stmt ::= IF LP expression RP statement ELSE statement 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode es = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTifthenelse(e, s, es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_stmt ::= expression SEMI 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ASTexprstatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression_stmt ::= SEMI 
            {
              ASTnode RESULT =null;
		
                        RESULT = new ASTleaf();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= WHILE LP expression RP statement 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTwhile(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_stmt ::= RETURN SEMI 
            {
              ASTnode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LEXSymbol r = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ASTreturn(r);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_stmt ::= RETURN expression SEMI 
            {
              ASTnode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LEXSymbol r = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ASTreturn(e, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= var ASSIGN expression 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LEXSymbol a = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode r = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTassignment(l, r, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= simple_expression 
            {
              ASTnode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode s = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= ID 
            {
              ASTnode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTident(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= ID LS expression RS 
            {
              ASTnode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ASTarrayder(new ASTident(name), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_expression ::= additive_expression relop additive_expression 
            {
              ASTnode RESULT =null;
		int aelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode ael = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode op = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode ae = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinexp(ael, (ASTbinop)op, ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expression ::= additive_expression 
            {
              ASTnode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode ae = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relop ::= LE 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= LT 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relop ::= GE 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= GT 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= EQ 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= NE 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // additive_expression ::= additive_expression addop term 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode op = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode t = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinexp(l, (ASTbinop)op, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additive_expression ::= term 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode t = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // addop ::= PLUS 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addop ::= MINUS 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term mulop factor 
            {
              ASTnode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode t = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode op = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode f = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinexp(t,(ASTbinop)op,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              ASTnode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode f = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mulop ::= TIMES 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= DIVIDE 
            {
              ASTnode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol o = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTbinop(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= LP expression RP 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= var 
            {
              ASTnode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode v = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= call 
            {
              ASTnode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode c = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NUM 
            {
              ASTnode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LEXSymbol n = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTnumber(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call ::= ID LP args RP 
            {
              ASTnode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LEXSymbol name = (LEXSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTnode actuals = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ASTcall(name, actuals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= arg_list 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= 
            {
              ASTnode RESULT =null;
		
                                    RESULT = new ASTleaf();
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arg_list ::= arg_list COMMA expression 
            {
              ASTnode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTnode l = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTarglist(l, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg_list ::= expression 
            {
              ASTnode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTnode e = (ASTnode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
